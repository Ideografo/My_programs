#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int generate_key1(string text);
int *generate_key2(string text, int key, int len);
int type_char_count(string text);
void cipher_text_1(string text, int k1, int *k2, int l);

int main(void)
{
    // Ask for text to encrypt
    string plain_text = get_string("Insert text to encrypt:  ");
    // First key generation
    int key1 = generate_key1(plain_text);
    // How many different characters are
    int len = type_char_count(plain_text);
    // Second key generation
    int *key2 = generate_key2(plain_text, key1, len);
    // Encrypting text
    cipher_text_1(plain_text, key1, key2, len);

    free(key2);

    printf("\n");
    return 0;
}

int generate_key1(string text)
{
    // Create a three-digit key with the ASCII values of the first three characters
    int n;
    n = ((text[0]) % 10) * 100 + ((text[1]) % 10) * 10 + (text[2]) % 10;
    return n;
}

int *generate_key2(string text, int key, int len)
{
    // Use the first key to generate a key-string with the length of the amount of different characters
    int *array = (int *) malloc(len * sizeof(int));
    if (array == NULL)
    {
        fprintf(stderr, "Error: No se pudo asignar memoria.\n");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < len; i += 3)
    {
        array[i] = (key + len) + i;
    }

    for (int i = 1; i < len; i += 3)
    {
        array[i] = (key * len) + i;
    }

    for (int i = 2; i < len; i += 3)
    {
        array[i] = (key / len) + i;
    }

    return array;
}

int type_char_count(string text)
{
    // Calculate how many different characters are
    int characters[256] = {0};
    int count = 0;
    for (int j = 0; text[j] != '\0'; j++)
    {
        if (characters[(unsigned char) text[j]] == 0)
        {
            characters[(unsigned char) text[j]] = 1;
            count++;
        }
    }
    return count;
}

void cipher_text_1(string text, int k1, int *k2, int l)
{
    // Encrypting the text adding the values of the second key to the ASCII values of the text
    int l2 = strlen(text);
    int *ciphered_text = (int *) malloc(l2 * sizeof(int));
    if (ciphered_text == NULL)
    {
        fprintf(stderr, "Error: Memory couldn't be assigned.\n");
        exit(EXIT_FAILURE);
    }
    for (int i = 0; text[i] != 0; i++)
    {
        for (int k = i; k < l2; k += l)
        {
            ciphered_text[k] = k2[k % l] + text[k];
        }
    }
    // Returning the original text encrypted (also changing the decimal values to hexadecimal)
    printf("Ciphered_text: ");

    for (int i = 0; text[i] != '\0'; i++)
    {
        printf("%x %x %x ", (ciphered_text[i]) * 2, k1 - (2 * i), l + i);
        // Adding the first key and len information to help the decryption program
    }

    free(ciphered_text);
}

